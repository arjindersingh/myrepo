# Generated by Django 4.1.2 on 2025-09-10 07:39

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_name', models.CharField(help_text='e.g., 2024-2025', max_length=20, unique=True)),
                ('short_name', models.CharField(help_text='e.g., 24-25', max_length=10, unique=True)),
                ('display_name', models.CharField(help_text='e.g., Academic Year 2024-25', max_length=50)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Academic Year',
                'verbose_name_plural': 'Academic Years',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='AppExcludedEmp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Excluded Employee',
                'verbose_name_plural': 'Excluded Employees',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=100, verbose_name='Course Name')),
                ('short_name', models.CharField(max_length=20, verbose_name='Short Name')),
                ('display_name', models.CharField(max_length=100, verbose_name='Display Name')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(max_length=100, verbose_name='Department Name')),
                ('short_name', models.CharField(max_length=20, verbose_name='Short Name')),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emp_code', models.PositiveIntegerField(db_index=True, help_text='Enter a card number (up to 99999)', unique=True, validators=[django.core.validators.MaxValueValidator(99999)])),
                ('emp_name', models.CharField(max_length=30, verbose_name='Employee Name')),
            ],
        ),
        migrations.CreateModel(
            name='EmploymentStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='Employment Status')),
                ('description', models.TextField(blank=True, help_text='Additional details about this status', null=True)),
            ],
            options={
                'verbose_name': 'Employment Status',
                'verbose_name_plural': 'Employment Statuses',
            },
        ),
        migrations.CreateModel(
            name='Institute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institute_name', models.CharField(max_length=100, verbose_name='Institute Name')),
                ('short_name', models.CharField(max_length=10, verbose_name='Short Name')),
                ('address', models.TextField(verbose_name='Address')),
                ('pincode', models.CharField(max_length=10, verbose_name='Pincode')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Institute',
                'verbose_name_plural': 'Institutes',
            },
        ),
        migrations.CreateModel(
            name='JobCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_code', models.CharField(max_length=2, unique=True)),
                ('category_name', models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_name', models.CharField(default='TGT', max_length=10)),
                ('short_name', models.CharField(default='TGT', max_length=5)),
                ('display_name', models.CharField(default='Teacher', max_length=15)),
                ('description', models.CharField(default='Teaching Post Description', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Command_No', models.PositiveSmallIntegerField(default=100, help_text='A unique three-digit identifier for this command.', validators=[django.core.validators.MinValueValidator(100, message='The Command Number must be between 100 and 999.'), django.core.validators.MaxValueValidator(999, message='The Command Number must be between 100 and 999.')], verbose_name='Command Number')),
                ('Command_Depth', models.PositiveSmallIntegerField(default=1, help_text='Defines the depth level in the hierarchy (1 for top-level menus).', validators=[django.core.validators.MinValueValidator(1, message='The Command Depth must be between 1 and 9.'), django.core.validators.MaxValueValidator(9, message='The Command Depth must be between 1 and 9.')], verbose_name='Command Depth')),
                ('Command_Sequence', models.PositiveSmallIntegerField(default=1, help_text='Defines the order of display at the same level.', validators=[django.core.validators.MinValueValidator(1, message='The Command Sequence must be between 1 and 9.'), django.core.validators.MaxValueValidator(9, message='The Command Sequence must be between 1 and 9.')], verbose_name='Command Sequence')),
                ('UrlPath', models.CharField(help_text='Unique URL path for this command.', max_length=200, unique=True, verbose_name='Command URL Path')),
                ('UrlName', models.CharField(help_text='Enter the Django URL name used for reversing.', max_length=200, unique=True, verbose_name='URL Name')),
                ('Display_Menu_Text', models.CharField(default='Menu Name', help_text='Text displayed in the menu.', max_length=50, verbose_name='Menu Display Text')),
                ('icon_class', models.CharField(blank=True, help_text='CSS class for menu icons (e.g., Bootstrap icons).', max_length=50, verbose_name='Icon Class')),
                ('default_permission', models.BooleanField(default=True, help_text='Assign default menu permission to group.', verbose_name='Is Active')),
                ('default_display', models.BooleanField(default=True, help_text='Whether to display menu item in Menu permission Assignment.', verbose_name='Dsiplay in Menu list')),
            ],
            options={
                'verbose_name': 'Menu',
                'verbose_name_plural': 'Menus',
                'ordering': ['Command_Depth', 'Command_Sequence'],
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Setting name (e.g., enable_online_classes)', max_length=50, unique=True)),
                ('display_name', models.CharField(default='', help_text='Human-readable name for display (e.g., Enable Online Classes)', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Optional description of the settingâ€™s purpose or usage')),
                ('setting_type', models.CharField(choices=[('string', 'String'), ('number', 'Number'), ('boolean', 'Boolean'), ('json', 'JSON')], max_length=10)),
                ('default_value', models.TextField(help_text='Stores value based on type (JSON for structured data)')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_name', models.CharField(max_length=100, verbose_name='Subject Name')),
                ('short_name', models.CharField(max_length=20, verbose_name='Short Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
            },
        ),
        migrations.CreateModel(
            name='UserGroupMenuPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_access', models.BooleanField(default=True, help_text='Determines if the group can access this menu.', verbose_name='Has Access')),
            ],
            options={
                'verbose_name': 'User Group Menu Permission',
                'verbose_name_plural': 'User Group Menu Permissions',
            },
        ),
        migrations.CreateModel(
            name='UserMenuPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_access', models.BooleanField(default=True, help_text='Determines if the User can access this menu.', verbose_name='Has Access')),
            ],
            options={
                'verbose_name': 'User Menu Permission',
                'verbose_name_plural': 'User Menu Permissions',
            },
        ),
        migrations.CreateModel(
            name='Wing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Wing Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Wing',
                'verbose_name_plural': 'Wings',
            },
        ),
        migrations.CreateModel(
            name='UserSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(help_text='User-specific value, overrides global setting if present')),
                ('setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_specific_settings', to='accounts.setting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Display Name')),
                ('gender', models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'TransGender')], default='M', max_length=1)),
                ('dob', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('mobile', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\d{10,15}$', 'Enter a valid mobile number (10-15 digits).')], verbose_name='Mobile')),
                ('emp_code', models.PositiveIntegerField(blank=True, null=True, unique=True, validators=[django.core.validators.MaxValueValidator(99999)], verbose_name='Employee Code')),
                ('is_assessor', models.BooleanField(default=False)),
                ('is_inspector', models.BooleanField(default=False)),
                ('app_categories', models.ManyToManyField(blank=True, related_name='userprofile_acr_categories', to='accounts.jobcategory', verbose_name='ACR Categories')),
                ('app_departments', models.ManyToManyField(blank=True, related_name='userprofile_app_departments', to='accounts.department')),
                ('app_institutes', models.ManyToManyField(blank=True, related_name='userprofile_app_institutes', to='accounts.institute')),
                ('app_subjects', models.ManyToManyField(blank=True, related_name='userprofile_app_subjects', to='accounts.subject', verbose_name='App Subjects')),
            ],
        ),
    ]
